/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SkyRunGame {
  export type QuestStruct = {
    title: string;
    description: string;
    questType: BigNumberish;
    rewardAmount: BigNumberish;
    targetScore: BigNumberish;
    active: boolean;
  };

  export type QuestStructOutput = [
    title: string,
    description: string,
    questType: bigint,
    rewardAmount: bigint,
    targetScore: bigint,
    active: boolean
  ] & {
    title: string;
    description: string;
    questType: bigint;
    rewardAmount: bigint;
    targetScore: bigint;
    active: boolean;
  };

  export type ProgressStruct = {
    progress: BigNumberish;
    completed: boolean;
    claimed: boolean;
  };

  export type ProgressStructOutput = [
    progress: bigint,
    completed: boolean,
    claimed: boolean
  ] & { progress: bigint; completed: boolean; claimed: boolean };

  export type StatsStruct = {
    totalGamesPlayed: BigNumberish;
    totalScore: BigNumberish;
    highScore: BigNumberish;
    tokensEarned: BigNumberish;
    level: BigNumberish;
    lifelinesPurchased: BigNumberish;
    availableLives: BigNumberish;
  };

  export type StatsStructOutput = [
    totalGamesPlayed: bigint,
    totalScore: bigint,
    highScore: bigint,
    tokensEarned: bigint,
    level: bigint,
    lifelinesPurchased: bigint,
    availableLives: bigint
  ] & {
    totalGamesPlayed: bigint;
    totalScore: bigint;
    highScore: bigint;
    tokensEarned: bigint;
    level: bigint;
    lifelinesPurchased: bigint;
    availableLives: bigint;
  };
}

export interface SkyRunGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyLifeline"
      | "claimQuestReward"
      | "createQuest"
      | "getAvailableLives"
      | "getQuest"
      | "getQuestProgress"
      | "getTokenBalance"
      | "getTotalQuests"
      | "getUserStats"
      | "htsToken"
      | "lifelineCost"
      | "owner"
      | "questCounter"
      | "quests"
      | "setHTSToken"
      | "setLifelineCost"
      | "submitGameScore"
      | "token"
      | "useHTS"
      | "useLifeline"
      | "userQuestProgress"
      | "userStats"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyLifeline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimQuestReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createQuest",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableLives",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestProgress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalQuests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "htsToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lifelineCost",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "questCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHTSToken",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLifelineCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGameScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "useHTS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "useLifeline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userQuestProgress",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userStats",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "buyLifeline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimQuestReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableLives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuestProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalQuests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "htsToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lifelineCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "questCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHTSToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLifelineCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitGameScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "useHTS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "useLifeline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userQuestProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStats", data: BytesLike): Result;
}

export interface SkyRunGame extends BaseContract {
  connect(runner?: ContractRunner | null): SkyRunGame;
  waitForDeployment(): Promise<this>;

  interface: SkyRunGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyLifeline: TypedContractMethod<[], [void], "nonpayable">;

  claimQuestReward: TypedContractMethod<
    [questId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createQuest: TypedContractMethod<
    [
      title: string,
      description: string,
      questType: BigNumberish,
      rewardAmount: BigNumberish,
      targetScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getAvailableLives: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getQuest: TypedContractMethod<
    [questId: BigNumberish],
    [SkyRunGame.QuestStructOutput],
    "view"
  >;

  getQuestProgress: TypedContractMethod<
    [questId: BigNumberish, user: AddressLike],
    [SkyRunGame.ProgressStructOutput],
    "view"
  >;

  getTokenBalance: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getTotalQuests: TypedContractMethod<[], [bigint], "view">;

  getUserStats: TypedContractMethod<
    [user: AddressLike],
    [SkyRunGame.StatsStructOutput],
    "view"
  >;

  htsToken: TypedContractMethod<[], [string], "view">;

  lifelineCost: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  questCounter: TypedContractMethod<[], [bigint], "view">;

  quests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        title: string;
        description: string;
        questType: bigint;
        rewardAmount: bigint;
        targetScore: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  setHTSToken: TypedContractMethod<
    [tokenAddress: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  setLifelineCost: TypedContractMethod<
    [cost: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitGameScore: TypedContractMethod<
    [score: BigNumberish],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  useHTS: TypedContractMethod<[], [boolean], "view">;

  useLifeline: TypedContractMethod<[], [void], "nonpayable">;

  userQuestProgress: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, boolean, boolean] & {
        progress: bigint;
        completed: boolean;
        claimed: boolean;
      }
    ],
    "view"
  >;

  userStats: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalGamesPlayed: bigint;
        totalScore: bigint;
        highScore: bigint;
        tokensEarned: bigint;
        level: bigint;
        lifelinesPurchased: bigint;
        availableLives: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyLifeline"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimQuestReward"
  ): TypedContractMethod<[questId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createQuest"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      questType: BigNumberish,
      rewardAmount: BigNumberish,
      targetScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvailableLives"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getQuest"
  ): TypedContractMethod<
    [questId: BigNumberish],
    [SkyRunGame.QuestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuestProgress"
  ): TypedContractMethod<
    [questId: BigNumberish, user: AddressLike],
    [SkyRunGame.ProgressStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenBalance"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalQuests"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserStats"
  ): TypedContractMethod<
    [user: AddressLike],
    [SkyRunGame.StatsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "htsToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lifelineCost"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "questCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "quests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        title: string;
        description: string;
        questType: bigint;
        rewardAmount: bigint;
        targetScore: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setHTSToken"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLifelineCost"
  ): TypedContractMethod<[cost: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitGameScore"
  ): TypedContractMethod<[score: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "useHTS"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "useLifeline"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userQuestProgress"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, boolean, boolean] & {
        progress: bigint;
        completed: boolean;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userStats"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalGamesPlayed: bigint;
        totalScore: bigint;
        highScore: bigint;
        tokensEarned: bigint;
        level: bigint;
        lifelinesPurchased: bigint;
        availableLives: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
